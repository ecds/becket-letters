{"ast":null,"code":"var _jsxFileName = \"/Users/mtherri/Documents/Code/beckett-letters/src/components/EntityDetails.js\";\nimport axios from 'axios';\nimport DocMetaBuilder from './utilities/DocMetaBuilder';\nimport HeaderBuilder from './utilities/HeaderBuilder';\nimport MentionedLetters from './utilities/MentionedLettersTable';\nimport React, { Component } from 'react';\n\nclass EntityDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getData = () => {\n      axios.all([axios.get(this.props.apiUrl + '/entities/' + this.props.match.params.id)]).then(axios.spread(getData => {\n        const entityData = getData.data.data;\n        console.log(entityData);\n        this.setState({\n          entityData\n        });\n        this.setState({\n          isLoaded: true\n        });\n      })).catch(err => {\n        this.setState({\n          isLoaded: false\n        });\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.state = {\n      isLoaded: false,\n      error: '',\n      entityData: []\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded\n    } = this.state; // if there is an error\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 20\n        }\n      }, \"Error: \", error.message); // if not loaded show loading\n    } else if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 20\n        }\n      }, \"Loading...\"); // return now that component has value\n    } else {\n      let metaBuild = {\n        title: this.state.entityData.attributes.label,\n        description: `${this.state.entityData.attributes.label} ${this.state.entityData.attributes.properties['place-date']}`,\n        id: this.state.entityData.id\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"details\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(DocMetaBuilder, Object.assign({}, metaBuild, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(HeaderBuilder, {\n        entityData: this.state.entityData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, \"Mentioned In:\"), /*#__PURE__*/React.createElement(MentionedLetters, {\n        letters: this.state.entityData.attributes['public-letters-hash'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nexport default EntityDetails;","map":{"version":3,"sources":["/Users/mtherri/Documents/Code/beckett-letters/src/components/EntityDetails.js"],"names":["axios","DocMetaBuilder","HeaderBuilder","MentionedLetters","React","Component","EntityDetails","constructor","props","getData","all","get","apiUrl","match","params","id","then","spread","entityData","data","console","log","setState","isLoaded","catch","err","error","message","state","componentDidMount","render","metaBuild","title","attributes","label","description","properties"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport DocMetaBuilder from './utilities/DocMetaBuilder';\nimport HeaderBuilder from './utilities/HeaderBuilder';\nimport MentionedLetters from './utilities/MentionedLettersTable';\nimport React, { Component } from 'react';\n\nclass EntityDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            error: '',\n            entityData: []\n        }\n    }\n\n    componentDidMount() {\n        this.getData()\n    }\n\n    getData = () => {\n        axios.all([\n            axios.get(this.props.apiUrl + '/entities/' + this.props.match.params.id)])\n            .then(axios.spread((getData) => {\n                const entityData = getData.data.data;\n                console.log(entityData);\n                this.setState({ entityData });\n                this.setState({ isLoaded: true })\n            }))\n            .catch((err) => {\n                this.setState({ isLoaded: false });\n                this.setState({ error: err.message });\n            });\n    }\n\n    render() {\n        const { error, isLoaded } = this.state;\n        // if there is an error\n        if (error) {\n            return <div>Error: {error.message}</div>;\n            // if not loaded show loading\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n            // return now that component has value\n        } else {\n            let metaBuild = {\n                title: this.state.entityData.attributes.label,\n                description: `${this.state.entityData.attributes.label} ${this.state.entityData.attributes.properties['place-date']}`,\n                id: this.state.entityData.id\n            }\n            return (\n                <div className=\"details\">\n                    <DocMetaBuilder {...metaBuild} />\n                    <HeaderBuilder entityData={this.state.entityData} />\n                    <h2>Mentioned In:</h2>\n                    <MentionedLetters letters={this.state.entityData.attributes['public-letters-hash']} />\n                </div >\n            )\n        }\n    }\n}\n\nexport default EntityDetails;"]},"metadata":{},"sourceType":"module"}